# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401
from decimal import Decimal

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
from api import util


class LiquidityPool(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, symbol: str=None, amount_native: Decimal=None, amount_symbol: Decimal=None):  # noqa: E501
        """LiquidityPool - a model defined in Swagger

        :param symbol: The symbol of this LiquidityPool.  # noqa: E501
        :type symbol: str
        :param amount_native: The amount_native of this LiquidityPool.  # noqa: E501
        :type amount_native: Decimal
        :param amount_symbol: The amount_symbol of this LiquidityPool.  # noqa: E501
        :type amount_symbol: Decimal
        """
        self.swagger_types = {
            'symbol': str,
            'amount_native': Decimal,
            'amount_symbol': Decimal
        }

        self.attribute_map = {
            'symbol': 'symbol',
            'amount_native': 'amountNative',
            'amount_symbol': 'amountSymbol'
        }
        self._symbol = symbol
        self._amount_native = amount_native
        self._amount_symbol = amount_symbol

    @classmethod
    def from_dict(cls, dikt) -> 'LiquidityPool':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LiquidityPool of this LiquidityPool.  # noqa: E501
        :rtype: LiquidityPool
        """
        return util.deserialize_model(dikt, cls)

    @property
    def symbol(self) -> str:
        """Gets the symbol of this LiquidityPool.


        :return: The symbol of this LiquidityPool.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol: str):
        """Sets the symbol of this LiquidityPool.


        :param symbol: The symbol of this LiquidityPool.
        :type symbol: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def amount_native(self) -> Decimal:
        """Gets the amount_native of this LiquidityPool.


        :return: The amount_native of this LiquidityPool.
        :rtype: Decimal
        """
        return self._amount_native

    @amount_native.setter
    def amount_native(self, amount_native: Decimal):
        """Sets the amount_native of this LiquidityPool.


        :param amount_native: The amount_native of this LiquidityPool.
        :type amount_native: Decimal
        """
        if amount_native is None:
            raise ValueError("Invalid value for `amount_native`, must not be `None`")  # noqa: E501

        self._amount_native = amount_native

    @property
    def amount_symbol(self) -> Decimal:
        """Gets the amount_symbol of this LiquidityPool.


        :return: The amount_symbol of this LiquidityPool.
        :rtype: Decimal
        """
        return self._amount_symbol

    @amount_symbol.setter
    def amount_symbol(self, amount_symbol: Decimal):
        """Sets the amount_symbol of this LiquidityPool.


        :param amount_symbol: The amount_symbol of this LiquidityPool.
        :type amount_symbol: Decimal
        """
        if amount_symbol is None:
            raise ValueError("Invalid value for `amount_symbol`, must not be `None`")  # noqa: E501

        self._amount_symbol = amount_symbol
